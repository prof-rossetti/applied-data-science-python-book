---
format:
  html:
    code-fold: false #show
jupyter: python3
execute:
  cache: true # re-render only when source changes
---

# Dates and Times in `pandas`

For these examples, we will use a time-series dataset of stock prices:


```{python}
#|code-fold: True

from pandas import read_csv

request_url = "https://raw.githubusercontent.com/prof-rossetti/intro-to-python/main/data/daily_adjusted_nflx.csv"
df = read_csv(request_url)
df.drop(columns=["split_coefficient", "dividend_amount"], inplace=True)
df.head()
```





When we are working with a column of strings representing datetime values,
it is helpful to use the [`to_datetime` function](https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html) to convert these string values into datetime-aware column that respects datetime operations.



```{python}
first_date = df["timestamp"][0]
print(type(first_date))
```

```
from pandas import to_datetime

prices_df["timestamp_dt"] = to_datetime(prices_df["timestamp"])

print(type(prices_df["timestamp_dt"][0]))
```

This allows us to easily convert and transform those values to various component date parts, such as just the year, just the month, etc.:


```
prices_df["year"] = prices_df["timestamp_dt"].dt.year
prices_df["month"] = prices_df["timestamp_dt"].dt.month
prices_df["weekday"] = prices_df["timestamp_dt"].dt.weekday
prices_df["day_name"] = prices_df["timestamp_dt"].dt.strftime("%A")

prices_df[["timestamp", "timestamp_dt", "year_month", "year", "month", "weekday", "day_name"]]
```

For more information about date and time conversions, see the following documentation links:

  + <https://docs.python.org/3/library/datetime.html>
  + <https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior>
  + <https://docs.python.org/3/library/datetime.html#datetime.datetime.weekday>
